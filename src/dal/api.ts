/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * My Title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost:5001/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        this.configuration = new Configuration();
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface CheckList
 */
export interface CheckList {
    /**
     * 
     * @type {string}
     * @memberof CheckList
     */
    id: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CheckList
     */
    outstanding?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CheckList
     */
    done?: Array<string>;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum ItemState {
    NUMBER_0 = <any>0,
    NUMBER_1 = <any>1
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
// export interface ProblemDetails extends null<String, any> {
export interface ProblemDetails {
    [key: string]: any;

}
/**
 * 
 * @export
 * @interface WeatherForecast
 */
export interface WeatherForecast {
    /**
     * 
     * @type {Date}
     * @memberof WeatherForecast
     */
    date: Date;
    /**
     * 
     * @type {number}
     * @memberof WeatherForecast
     */
    temperatureC: number;
    /**
     * 
     * @type {number}
     * @memberof WeatherForecast
     */
    temperatureF: number;
    /**
     * 
     * @type {string}
     * @memberof WeatherForecast
     */
    summary?: string;
}
/**
 * ItemsApi - fetch parameter creator
 * @export
 */
export const ItemsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} body 
         * @param {string} listId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsAddItem(body: string, listId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling itemsAddItem.');
            }
            // verify required parameter 'listId' is not null or undefined
            if (listId === null || listId === undefined) {
                throw new RequiredError('listId', 'Required parameter listId was null or undefined when calling itemsAddItem.');
            }
            const localVarPath = `/api/v1/lists/{listId}/items`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} body 
         * @param {string} listId 
         * @param {string} oldItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsEditItem(body: string, listId: string, oldItem: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling itemsEditItem.');
            }
            // verify required parameter 'listId' is not null or undefined
            if (listId === null || listId === undefined) {
                throw new RequiredError('listId', 'Required parameter listId was null or undefined when calling itemsEditItem.');
            }
            // verify required parameter 'oldItem' is not null or undefined
            if (oldItem === null || oldItem === undefined) {
                throw new RequiredError('oldItem', 'Required parameter oldItem was null or undefined when calling itemsEditItem.');
            }
            const localVarPath = `/api/v1/lists/{listId}/items/{oldItem}`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
                .replace(`{${"oldItem"}}`, encodeURIComponent(String(oldItem)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} listId 
         * @param {string} item 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsRemoveItem(listId: string, item: string, options: any = {}): FetchArgs {
            // verify required parameter 'listId' is not null or undefined
            if (listId === null || listId === undefined) {
                throw new RequiredError('listId', 'Required parameter listId was null or undefined when calling itemsRemoveItem.');
            }
            // verify required parameter 'item' is not null or undefined
            if (item === null || item === undefined) {
                throw new RequiredError('item', 'Required parameter item was null or undefined when calling itemsRemoveItem.');
            }
            const localVarPath = `/api/v1/lists/{listId}/items/{item}`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
                .replace(`{${"item"}}`, encodeURIComponent(String(item)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} body 
         * @param {string} listId 
         * @param {string} item 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsUpdateItem(body: number, listId: string, item: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling itemsUpdateItem.');
            }
            // verify required parameter 'listId' is not null or undefined
            if (listId === null || listId === undefined) {
                throw new RequiredError('listId', 'Required parameter listId was null or undefined when calling itemsUpdateItem.');
            }
            // verify required parameter 'item' is not null or undefined
            if (item === null || item === undefined) {
                throw new RequiredError('item', 'Required parameter item was null or undefined when calling itemsUpdateItem.');
            }
            const localVarPath = `/api/v1/lists/{listId}/items/{item}/state`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
                .replace(`{${"item"}}`, encodeURIComponent(String(item)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"number" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemsApi - functional programming interface
 * @export
 */
export const ItemsApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} body 
         * @param {string} listId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsAddItem(body: string, listId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = ItemsApiFetchParamCreator(configuration).itemsAddItem(body, listId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} body 
         * @param {string} listId 
         * @param {string} oldItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsEditItem(body: string, listId: string, oldItem: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = ItemsApiFetchParamCreator(configuration).itemsEditItem(body, listId, oldItem, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} listId 
         * @param {string} item 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsRemoveItem(listId: string, item: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = ItemsApiFetchParamCreator(configuration).itemsRemoveItem(listId, item, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} body 
         * @param {string} listId 
         * @param {string} item 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsUpdateItem(body: number, listId: string, item: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = ItemsApiFetchParamCreator(configuration).itemsUpdateItem(body, listId, item, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ItemsApi - factory interface
 * @export
 */
export const ItemsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} body 
         * @param {string} listId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsAddItem(body: string, listId: string, options?: any) {
            return ItemsApiFp(configuration).itemsAddItem(body, listId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} body 
         * @param {string} listId 
         * @param {string} oldItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsEditItem(body: string, listId: string, oldItem: string, options?: any) {
            return ItemsApiFp(configuration).itemsEditItem(body, listId, oldItem, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} listId 
         * @param {string} item 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsRemoveItem(listId: string, item: string, options?: any) {
            return ItemsApiFp(configuration).itemsRemoveItem(listId, item, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} body 
         * @param {string} listId 
         * @param {string} item 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsUpdateItem(body: number, listId: string, item: string, options?: any) {
            return ItemsApiFp(configuration).itemsUpdateItem(body, listId, item, options)(fetch, basePath);
        },
    };
};

/**
 * ItemsApi - object-oriented interface
 * @export
 * @class ItemsApi
 * @extends {BaseAPI}
 */
export class ItemsApi extends BaseAPI {
    /**
     * 
     * @param {string} body 
     * @param {string} listId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public itemsAddItem(body: string, listId: string, options?: any) {
        return ItemsApiFp(this.configuration).itemsAddItem(body, listId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} body 
     * @param {string} listId 
     * @param {string} oldItem 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public itemsEditItem(body: string, listId: string, oldItem: string, options?: any) {
        return ItemsApiFp(this.configuration).itemsEditItem(body, listId, oldItem, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} listId 
     * @param {string} item 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public itemsRemoveItem(listId: string, item: string, options?: any) {
        return ItemsApiFp(this.configuration).itemsRemoveItem(listId, item, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} body 
     * @param {string} listId 
     * @param {string} item 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public itemsUpdateItem(body: number, listId: string, item: string, options?: any) {
        return ItemsApiFp(this.configuration).itemsUpdateItem(body, listId, item, options)(this.fetch, this.basePath);
    }

}
/**
 * ListsApi - fetch parameter creator
 * @export
 */
export const ListsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CheckList} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsCreateList(body: CheckList, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling listsCreateList.');
            }
            const localVarPath = `/api/v1/Lists`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CheckList" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsGetAllList(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/Lists`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} listId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsGetList(listId: string, options: any = {}): FetchArgs {
            // verify required parameter 'listId' is not null or undefined
            if (listId === null || listId === undefined) {
                throw new RequiredError('listId', 'Required parameter listId was null or undefined when calling listsGetList.');
            }
            const localVarPath = `/api/v1/Lists/{listId}`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },

        /**
         * 
         * @param {string} listId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsSubscribeToList(listId: string, messageCallback: any, errorCallback: any, options: any = {}): EventSource {
            // verify required parameter 'listId' is not null or undefined
            if (listId === null || listId === undefined) {
                throw new RequiredError('listId', 'Required parameter listId was null or undefined when calling listsGetList.');
            }
            const localVarPath = `/api/v1/Lists/{listId}/events`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            var es = new EventSource(url.format(localVarUrlObj));
            es.onmessage = messageCallback;
            es.onerror = errorCallback;
            return es;
        },
    }
};

/**
 * ListsApi - functional programming interface
 * @export
 */
export const ListsApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CheckList} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsCreateList(body: CheckList, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CheckList> {
            const localVarFetchArgs = ListsApiFetchParamCreator(configuration).listsCreateList(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsGetAllList(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<CheckList>> {
            const localVarFetchArgs = ListsApiFetchParamCreator(configuration).listsGetAllList(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} listId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsGetList(listId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CheckList> {
            const localVarFetchArgs = ListsApiFetchParamCreator(configuration).listsGetList(listId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ListsApi - factory interface
 * @export
 */
export const ListsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {CheckList} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsCreateList(body: CheckList, options?: any) {
            return ListsApiFp(configuration).listsCreateList(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsGetAllList(options?: any) {
            return ListsApiFp(configuration).listsGetAllList(options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} listId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsGetList(listId: string, options?: any) {
            return ListsApiFp(configuration).listsGetList(listId, options)(fetch, basePath);
        },
    };
};

/**
 * ListsApi - object-oriented interface
 * @export
 * @class ListsApi
 * @extends {BaseAPI}
 */
export class ListsApi extends BaseAPI {
    /**
     * 
     * @param {CheckList} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsCreateList(body: CheckList, options?: any) {
        return ListsApiFp(this.configuration).listsCreateList(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsGetAllList(options?: any) {
        return ListsApiFp(this.configuration).listsGetAllList(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} listId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsGetList(listId: string, options?: any) {
        return ListsApiFp(this.configuration).listsGetList(listId, options)(this.fetch, this.basePath);
    }

    /**
         * 
         * @param {string} listId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
     listsSubscribeToList(listId: string, messageCallback: any, errorCallback: any, options: any = {}): EventSource {
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new RequiredError('listId', 'Required parameter listId was null or undefined when calling listsGetList.');
        }
        const localVarPath = `/api/v1/Lists/{listId}/events`
            .replace(`{${"listId"}}`, encodeURIComponent(String(listId)));
        
        // // const localVarUrlObj = url.parse(localVarPath, true);
        // // const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
        // // const localVarHeaderParameter = {} as any;
        // // const localVarQueryParameter = {} as any;

        // // localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
        // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
        // // delete localVarUrlObj.search;
        // // localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

        var es = new EventSource(this.configuration.basePath + localVarPath)
        es.onmessage = messageCallback;
        es.onerror = errorCallback;
        return es;
    }

}
/**
 * WeatherForecastApi - fetch parameter creator
 * @export
 */
export const WeatherForecastApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherForecastGet(options: any = {}): FetchArgs {
            const localVarPath = `/WeatherForecast`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WeatherForecastApi - functional programming interface
 * @export
 */
export const WeatherForecastApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherForecastGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<WeatherForecast>> {
            const localVarFetchArgs = WeatherForecastApiFetchParamCreator(configuration).weatherForecastGet(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * WeatherForecastApi - factory interface
 * @export
 */
export const WeatherForecastApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherForecastGet(options?: any) {
            return WeatherForecastApiFp(configuration).weatherForecastGet(options)(fetch, basePath);
        },
    };
};

/**
 * WeatherForecastApi - object-oriented interface
 * @export
 * @class WeatherForecastApi
 * @extends {BaseAPI}
 */
export class WeatherForecastApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherForecastApi
     */
    public weatherForecastGet(options?: any) {
        return WeatherForecastApiFp(this.configuration).weatherForecastGet(options)(this.fetch, this.basePath);
    }

}
